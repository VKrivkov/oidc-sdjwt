var __getProtoOf = Object.getPrototypeOf;
var __reflectGet = Reflect.get;
var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/sd-jwt-vc-instance.ts
import { Jwt, SDJwtInstance } from "@sd-jwt/core";
import { SDJWTException } from "@sd-jwt/utils";
import {
  getListFromStatusListJWT
} from "@sd-jwt/jwt-status-list";
import Ajv from "ajv";
import addFormats from "ajv-formats";
var SDJwtVcInstance = class _SDJwtVcInstance extends SDJwtInstance {
  constructor(userConfig) {
    super(userConfig);
    /**
     * The type of the SD-JWT-VC set in the header.typ field.
     */
    this.type = "dc+sd-jwt";
    this.userConfig = {};
    if (userConfig) {
      this.userConfig = userConfig;
    }
  }
  /**
   * Validates if the disclosureFrame contains any reserved fields. If so it will throw an error.
   * @param disclosureFrame
   */
  validateReservedFields(disclosureFrame) {
    if ((disclosureFrame == null ? void 0 : disclosureFrame._sd) && Array.isArray(disclosureFrame._sd) && disclosureFrame._sd.length > 0) {
      const reservedNames = ["iss", "nbf", "exp", "cnf", "vct", "status"];
      const reservedNamesInDisclosureFrame = disclosureFrame._sd.filter((key) => reservedNames.includes(key));
      if (reservedNamesInDisclosureFrame.length > 0) {
        throw new SDJWTException("Cannot disclose protected field");
      }
    }
  }
  /**
   * Fetches the status list from the uri with a timeout of 10 seconds.
   * @param uri The URI to fetch from.
   * @returns A promise that resolves to a compact JWT.
   */
  statusListFetcher(uri) {
    return __async(this, null, function* () {
      var _a;
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 1e4);
      try {
        const response = yield fetch(uri, {
          signal: controller.signal,
          headers: { Accept: "application/statuslist+jwt" }
        });
        if (!response.ok) {
          throw new Error(
            `Error fetching status list: ${response.status} ${yield response.text()}`
          );
        }
        if (!((_a = response.headers.get("content-type")) == null ? void 0 : _a.includes("application/statuslist+jwt"))) {
          throw new Error("Invalid content type");
        }
        return response.text();
      } finally {
        clearTimeout(timeoutId);
      }
    });
  }
  /**
   * Validates the status, throws an error if the status is not 0.
   * @param status
   * @returns
   */
  statusValidator(status) {
    return __async(this, null, function* () {
      if (status !== 0)
        throw new SDJWTException("Status is not valid");
      return Promise.resolve();
    });
  }
  /**
   * Verifies the SD-JWT-VC. It will validate the signature, the keybindings when required, the status, and the VCT.
   */
  verify(encodedSDJwt, requiredClaimKeys, requireKeyBindings) {
    return __async(this, null, function* () {
      const result = yield __superGet(_SDJwtVcInstance.prototype, this, "verify").call(this, encodedSDJwt, requiredClaimKeys, requireKeyBindings).then((res) => {
        return {
          payload: res.payload,
          header: res.header,
          kb: res.kb
        };
      });
      yield this.verifyStatus(result);
      if (this.userConfig.loadTypeMetadataFormat) {
        yield this.verifyVct(result);
      }
      return result;
    });
  }
  /**
   * Default function to fetch the VCT from the uri. We assume that the vct is a URL that is used to fetch the VCT.
   * @param uri
   * @returns
   */
  vctFetcher(uri, integrity) {
    return __async(this, null, function* () {
      const elements = uri.split("/");
      elements.splice(3, 0, ".well-known/vct");
      const url = elements.join("/");
      return this.fetch(url, integrity);
    });
  }
  /**
   * Validates the integrity of the response if the integrity is passed. If the integrity does not match, an error is thrown.
   * @param integrity
   * @param response
   */
  validateIntegrity(response, url, integrity) {
    return __async(this, null, function* () {
      if (integrity) {
        const arrayBuffer = yield response.arrayBuffer();
        const alg = integrity.split("-")[0];
        const hashBuffer = yield this.userConfig.hasher(
          arrayBuffer,
          alg
        );
        const integrityHash = integrity.split("-")[1];
        const hash = Array.from(new Uint8Array(hashBuffer)).map((byte) => byte.toString(16).padStart(2, "0")).join("");
        if (hash !== integrityHash) {
          throw new Error(
            `Integrity check for ${url} failed: is ${hash}, but expected ${integrityHash}`
          );
        }
      }
    });
  }
  /**
   * Fetches the content from the url with a timeout of 10 seconds.
   * @param url
   * @returns
   */
  fetch(url, integrity) {
    return __async(this, null, function* () {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 1e4);
      try {
        const response = yield fetch(url, {
          signal: controller.signal
        });
        if (!response.ok) {
          throw new Error(yield response.text());
        }
        yield this.validateIntegrity(response.clone(), url, integrity);
        return response.json();
      } finally {
        clearTimeout(timeoutId);
      }
    });
  }
  /**
   * Loads the schema either from the object or as fallback from the uri.
   * @param typeMetadataFormat
   * @returns
   */
  loadSchema(typeMetadataFormat) {
    return __async(this, null, function* () {
      if (typeMetadataFormat.schema)
        return typeMetadataFormat.schema;
      if (typeMetadataFormat.schema_uri) {
        const schema = yield this.fetch(
          typeMetadataFormat.schema_uri,
          typeMetadataFormat["schema_uri#Integrity"]
        );
        return schema;
      }
      throw new Error("No schema or schema_uri found");
    });
  }
  /**
   * Verifies the VCT of the SD-JWT-VC. Returns the type metadata format. If the schema does not match, an error is thrown. If it matches, it will return the type metadata format.
   * @param result
   * @returns
   */
  verifyVct(result) {
    return __async(this, null, function* () {
      var _a;
      const fetcher = (_a = this.userConfig.vctFetcher) != null ? _a : this.vctFetcher.bind(this);
      const typeMetadataFormat = yield fetcher(
        result.payload.vct,
        result.payload["vct#Integrity"]
      );
      if (typeMetadataFormat.extends) {
      }
      const schema = yield this.loadSchema(typeMetadataFormat);
      const loadedSchemas = /* @__PURE__ */ new Set();
      const ajv = new Ajv({
        loadSchema: (uri) => __async(this, null, function* () {
          if (loadedSchemas.has(uri)) {
            return {};
          }
          const response = yield fetch(uri);
          if (!response.ok) {
            throw new Error(
              `Error fetching schema: ${response.status} ${yield response.text()}`
            );
          }
          loadedSchemas.add(uri);
          return response.json();
        })
      });
      addFormats(ajv);
      const validate = yield ajv.compileAsync(schema);
      const valid = validate(result.payload);
      if (!valid) {
        throw new SDJWTException(
          `Payload does not match the schema: ${JSON.stringify(validate.errors)}`
        );
      }
      return typeMetadataFormat;
    });
  }
  /**
   * Verifies the status of the SD-JWT-VC.
   * @param result
   */
  verifyStatus(result) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      if (result.payload.status) {
        if (result.payload.status.status_list) {
          const fetcher = (_a = this.userConfig.statusListFetcher) != null ? _a : this.statusListFetcher.bind(this);
          const statusListJWT = yield fetcher(
            result.payload.status.status_list.uri
          );
          const slJWT = Jwt.fromEncode(statusListJWT);
          yield slJWT.verify(this.userConfig.verifier);
          if (((_b = slJWT.payload) == null ? void 0 : _b.exp) && slJWT.payload.exp < Date.now() / 1e3) {
            throw new SDJWTException("Status list is expired");
          }
          const statusList = getListFromStatusListJWT(statusListJWT);
          const status = statusList.getStatus(
            result.payload.status.status_list.idx
          );
          const statusValidator = (_c = this.userConfig.statusValidator) != null ? _c : this.statusValidator.bind(this);
          yield statusValidator(status);
        }
      }
    });
  }
};
export {
  SDJwtVcInstance
};
