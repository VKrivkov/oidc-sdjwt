import { SDJWTConfig, kbPayload, kbHeader, DisclosureFrame } from '@sd-jwt/types';
import { SdJwtPayload, SDJwtInstance } from '@sd-jwt/core';

/**
 * https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-04.html#name-type-metadata-format
 */
type TypeMetadataFormat = {
    vct: string;
    name?: string;
    description?: string;
    extends?: string;
    'extends#Integrity'?: string;
    schema?: object;
    schema_uri?: string;
    'schema_uri#Integrity'?: string;
};

type VcTFetcher = (uri: string, integrity?: string) => Promise<TypeMetadataFormat>;

type StatusListFetcher = (uri: string) => Promise<string>;
type StatusValidator = (status: number) => Promise<void>;
/**
 * Configuration for SD-JWT-VC
 */
type SDJWTVCConfig = SDJWTConfig & {
    statusListFetcher?: StatusListFetcher;
    statusValidator?: StatusValidator;
    vctFetcher?: VcTFetcher;
    loadTypeMetadataFormat?: boolean;
};

interface SDJWTVCStatusReference {
    status_list: {
        idx: number;
        uri: string;
    };
}

interface SdJwtVcPayload extends SdJwtPayload {
    iss: string;
    nbf?: number;
    exp?: number;
    cnf?: unknown;
    vct: string;
    'vct#Integrity'?: string;
    status?: SDJWTVCStatusReference;
    sub?: string;
    iat?: number;
}

type VerificationResult = {
    payload: SdJwtVcPayload;
    header: Record<string, unknown> | undefined;
    kb: {
        payload: kbPayload;
        header: kbHeader;
    } | undefined;
    typeMetadataFormat?: TypeMetadataFormat;
};

declare class SDJwtVcInstance extends SDJwtInstance<SdJwtVcPayload> {
    /**
     * The type of the SD-JWT-VC set in the header.typ field.
     */
    protected type: string;
    protected userConfig: SDJWTVCConfig;
    constructor(userConfig?: SDJWTVCConfig);
    /**
     * Validates if the disclosureFrame contains any reserved fields. If so it will throw an error.
     * @param disclosureFrame
     */
    protected validateReservedFields(disclosureFrame: DisclosureFrame<SdJwtVcPayload>): void;
    /**
     * Fetches the status list from the uri with a timeout of 10 seconds.
     * @param uri The URI to fetch from.
     * @returns A promise that resolves to a compact JWT.
     */
    private statusListFetcher;
    /**
     * Validates the status, throws an error if the status is not 0.
     * @param status
     * @returns
     */
    private statusValidator;
    /**
     * Verifies the SD-JWT-VC. It will validate the signature, the keybindings when required, the status, and the VCT.
     */
    verify(encodedSDJwt: string, requiredClaimKeys?: string[], requireKeyBindings?: boolean): Promise<VerificationResult>;
    /**
     * Default function to fetch the VCT from the uri. We assume that the vct is a URL that is used to fetch the VCT.
     * @param uri
     * @returns
     */
    private vctFetcher;
    /**
     * Validates the integrity of the response if the integrity is passed. If the integrity does not match, an error is thrown.
     * @param integrity
     * @param response
     */
    private validateIntegrity;
    /**
     * Fetches the content from the url with a timeout of 10 seconds.
     * @param url
     * @returns
     */
    private fetch;
    /**
     * Loads the schema either from the object or as fallback from the uri.
     * @param typeMetadataFormat
     * @returns
     */
    private loadSchema;
    /**
     * Verifies the VCT of the SD-JWT-VC. Returns the type metadata format. If the schema does not match, an error is thrown. If it matches, it will return the type metadata format.
     * @param result
     * @returns
     */
    private verifyVct;
    /**
     * Verifies the status of the SD-JWT-VC.
     * @param result
     */
    private verifyStatus;
}

export { type SDJWTVCConfig, type SDJWTVCStatusReference, SDJwtVcInstance, type SdJwtVcPayload, type StatusListFetcher, type StatusValidator };
