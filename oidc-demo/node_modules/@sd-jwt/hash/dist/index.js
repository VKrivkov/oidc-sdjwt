"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  hasher: () => hasher,
  sha256: () => sha256
});
module.exports = __toCommonJS(src_exports);

// src/sha256.ts
var import_sha256 = require("@noble/hashes/sha256");
var import_utils = require("@sd-jwt/utils");
var sha256 = (text) => {
  const uint8Array = toUTF8Array(text);
  const hashBytes = (0, import_sha256.sha256)(uint8Array);
  return hashBytes;
};
var hasher = (data, algorithm) => {
  if (toCryptoAlg(algorithm) !== "sha256") {
    throw new import_utils.SDJWTException("Not implemented");
  }
  return sha256(data);
};
var toCryptoAlg = (hashAlg) => (
  // To cover sha-256, sha256, SHA-256, SHA256
  hashAlg.replace("-", "").toLowerCase()
);
function toUTF8Array(str) {
  const utf8 = [];
  for (let i = 0; i < str.length; i++) {
    let charcode = str.charCodeAt(i);
    if (charcode < 128)
      utf8.push(charcode);
    else if (charcode < 2048) {
      utf8.push(192 | charcode >> 6, 128 | charcode & 63);
    } else if (charcode < 55296 || charcode >= 57344) {
      utf8.push(
        224 | charcode >> 12,
        128 | charcode >> 6 & 63,
        128 | charcode & 63
      );
    } else {
      i++;
      charcode = 65536 + ((charcode & 1023) << 10 | str.charCodeAt(i) & 1023);
      utf8.push(
        240 | charcode >> 18,
        128 | charcode >> 12 & 63,
        128 | charcode >> 6 & 63,
        128 | charcode & 63
      );
    }
  }
  return new Uint8Array(utf8);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  hasher,
  sha256
});
