// src/sha256.ts
import { sha256 as nobleSha256 } from "@noble/hashes/sha256";
import { SDJWTException } from "@sd-jwt/utils";
var sha256 = (text) => {
  const uint8Array = toUTF8Array(text);
  const hashBytes = nobleSha256(uint8Array);
  return hashBytes;
};
var hasher = (data, algorithm) => {
  if (toCryptoAlg(algorithm) !== "sha256") {
    throw new SDJWTException("Not implemented");
  }
  return sha256(data);
};
var toCryptoAlg = (hashAlg) => (
  // To cover sha-256, sha256, SHA-256, SHA256
  hashAlg.replace("-", "").toLowerCase()
);
function toUTF8Array(str) {
  const utf8 = [];
  for (let i = 0; i < str.length; i++) {
    let charcode = str.charCodeAt(i);
    if (charcode < 128)
      utf8.push(charcode);
    else if (charcode < 2048) {
      utf8.push(192 | charcode >> 6, 128 | charcode & 63);
    } else if (charcode < 55296 || charcode >= 57344) {
      utf8.push(
        224 | charcode >> 12,
        128 | charcode >> 6 & 63,
        128 | charcode & 63
      );
    } else {
      i++;
      charcode = 65536 + ((charcode & 1023) << 10 | str.charCodeAt(i) & 1023);
      utf8.push(
        240 | charcode >> 18,
        128 | charcode >> 12 & 63,
        128 | charcode >> 6 & 63,
        128 | charcode & 63
      );
    }
  }
  return new Uint8Array(utf8);
}
export {
  hasher,
  sha256
};
